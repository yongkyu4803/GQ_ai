<!-- 주요 주제 영역 -->
<div class="content-card mb-3">
    <h5 class="d-flex align-items-center py-2 border-bottom"><i class="fas fa-lightbulb me-2 text-warning"></i>주요 주제</h5>
    <div class="py-2">
        <div class="row">
            <% lectures.find(l => l.link === '/lecture14').mainTopics.forEach((topic, index) => { %>
                <div class="col-md-6">
                    <div class="topic-item py-1 h-100">
                        <div class="d-flex align-items-start">
                            <i class="fas fa-check-circle mt-1 me-2 text-primary"></i>
                            <div>
                                <span class="fw-medium"><%= topic.title %></span>
                                <% if (topic.subTopics && topic.subTopics.length > 0) { %>
                                    <ul class="subtopic-list ps-3 mt-1 mb-0">
                                        <% topic.subTopics.forEach(subTopic => { %>
                                            <li class="small text-secondary">• <%= subTopic %></li>
                                        <% }); %>
                                    </ul>
                                <% } %>
                            </div>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>
    </div>
</div>

<div class="content-card">
  <h4><i class="fas fa-magic me-2"></i>바이브 코딩 실전 프로젝트</h4>
  <div class="overview-section">
    <div class="alert alert-info mt-2" role="alert">
      <h5><i class="fas fa-target me-2"></i>이 강의의 목표</h5>
      <ul>
        <li>실제 프로젝트를 통해 바이브 코딩의 전체 워크플로우를 경험합니다.</li>
        <li>기획부터 배포까지 AI와 협업하여 완성도 높은 웹 애플리케이션을 구축합니다.</li>
        <li>실무에서 바로 적용할 수 있는 바이브 코딩 베스트 프랙티스를 습득합니다.</li>
      </ul>
    </div>

    <h5 class="mt-4">바이브 코딩 프로젝트 방법론</h5>
    <ul>
      <li><strong>아이디어 구체화:</strong> AI와 브레인스토밍을 통한 프로젝트 기획</li>
      <li><strong>단계별 구현:</strong> MVP부터 점진적 기능 확장</li>
      <li><strong>실시간 피드백:</strong> 구현 과정에서 지속적인 AI 협업</li>
      <li><strong>품질 관리:</strong> 코드 리뷰, 테스트, 최적화를 AI와 함께 수행</li>
    </ul>
  </div>
</div>

<!-- 프로젝트 기획 섹션 -->
<div class="content-card mt-4">
  <h5><i class="fas fa-lightbulb me-2 text-warning"></i>1단계: AI와 함께하는 프로젝트 기획</h5>

  <div class="mt-3">
    <h6 class="fw-bold text-primary">아이디어 발굴 및 검증</h6>
    <div class="ps-3">
      <div class="bg-light p-3 rounded">
        <strong>AI 브레인스토밍 프롬프트:</strong>
        <pre class="mt-2 mb-0"><code>주제: [관심 분야] 웹 애플리케이션 아이디어 발굴
목표: 실용적이고 구현 가능한 프로젝트 아이디어 제안

요구사항:
- 개발 기간: 1-2주 내 완성 가능
- 기술 스택: [본인 수준에 맞는 기술]
- 대상 사용자: [구체적인 타겟 설정]
- 핵심 기능: 3-5개 이내

결과물:
1. 프로젝트 개요 및 목적
2. 주요 기능 목록
3. 기술 스택 추천
4. UI/UX 방향성
5. 구현 우선순위</code></pre>
      </div>

      <div class="mt-3">
        <strong>프로젝트 예시:</strong>
        <ul>
          <li><strong>개인 포트폴리오 사이트:</strong> 인터랙티브 요소가 포함된 현대적 포트폴리오</li>
          <li><strong>할일 관리 앱:</strong> 팀 협업 기능이 있는 고급 Todo 애플리케이션</li>
          <li><strong>날씨 대시보드:</strong> 다양한 기상 정보를 시각화하는 웹 앱</li>
          <li><strong>레시피 검색 사이트:</strong> 재료 기반 레시피 추천 시스템</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">기술 스택 선정 및 프로젝트 구조 설계</h6>
    <div class="ps-3">
      <div class="alert alert-warning">
        <strong>기술 스택 선정 가이드:</strong>
        <ul class="mb-0 mt-2">
          <li><strong>프론트엔드:</strong> React/Vue.js/Next.js + CSS Framework (Tailwind/Bootstrap)</li>
          <li><strong>백엔드:</strong> Node.js/Express 또는 서버리스 함수</li>
          <li><strong>데이터베이스:</strong> Firebase/Supabase 또는 JSON 파일</li>
          <li><strong>배포:</strong> Vercel/Netlify + GitHub Pages</li>
        </ul>
      </div>

      <div class="mt-3">
        <strong>폴더 구조 설계 프롬프트:</strong>
        <pre class="bg-light p-2 small"><code>프로젝트명: [선택한 프로젝트]
기술 스택: [선정된 기술들]

다음 조건을 만족하는 프로젝트 폴더 구조를 설계해주세요:
1. 확장성을 고려한 컴포넌트 분리
2. 코드 가독성과 유지보수성
3. 현업에서 사용하는 베스트 프랙티스 적용
4. 필요한 설정 파일들 포함</code></pre>
      </div>
    </div>
  </div>
</div>

<!-- 구현 단계 섹션 -->
<div class="content-card mt-4">
  <h5><i class="fas fa-code me-2 text-success"></i>2단계: AI 협업 구현 프로세스</h5>

  <div class="mt-3">
    <h6 class="fw-bold text-primary">프로젝트 초기화 및 기본 설정</h6>
    <div class="ps-3">
      <div class="bg-light p-3 rounded">
        <strong>초기화 단계별 진행:</strong>
        <ol class="mt-2">
          <li><strong>프로젝트 생성:</strong> Create React App, Vite, 또는 Next.js 초기화</li>
          <li><strong>의존성 설치:</strong> 필요한 라이브러리 설치 및 설정</li>
          <li><strong>폴더 구조 생성:</strong> 설계된 구조에 따른 디렉토리 생성</li>
          <li><strong>기본 컴포넌트:</strong> Header, Footer, Layout 컴포넌트 생성</li>
          <li><strong>라우팅 설정:</strong> React Router 또는 Vue Router 구성</li>
        </ol>
      </div>

      <div class="mt-3">
        <strong>AI 활용 팁:</strong>
        <ul>
          <li>package.json 설정과 scripts 자동 생성 요청</li>
          <li>ESLint, Prettier 설정 파일 생성 요청</li>
          <li>기본 CSS 리셋과 전역 스타일 생성</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">핵심 기능 단계별 구현</h6>
    <div class="ps-3">
      <div class="row">
        <div class="col-md-6">
          <div class="alert alert-success">
            <strong>1차 스프린트 (1-3일):</strong>
            <ul class="mb-0 mt-2">
              <li>메인 페이지 레이아웃</li>
              <li>기본 네비게이션</li>
              <li>핵심 기능 1개 구현</li>
              <li>반응형 디자인 적용</li>
            </ul>
          </div>
        </div>
        <div class="col-md-6">
          <div class="alert alert-info">
            <strong>2차 스프린트 (4-7일):</strong>
            <ul class="mb-0 mt-2">
              <li>추가 기능 구현</li>
              <li>데이터 관리 시스템</li>
              <li>사용자 인터랙션 개선</li>
              <li>에러 처리 및 로딩 상태</li>
            </ul>
          </div>
        </div>
      </div>

      <div class="mt-3">
        <strong>실시간 구현 프롬프트 패턴:</strong>
        <pre class="bg-light p-2 small"><code>현재 작업: [구현 중인 기능]
진행 상황: [현재까지 완성된 부분]
다음 단계: [구현하려는 기능]

요청사항:
1. [기능명] 컴포넌트 완전한 코드 작성
2. 상태 관리 로직 포함
3. 에러 처리 및 로딩 상태 처리
4. 반응형 CSS 스타일링
5. 접근성 고려사항 반영

추가 조건:
- 기존 코드와 일관성 유지
- 재사용 가능한 컴포넌트 설계
- 성능 최적화 고려</code></pre>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">실시간 디버깅 및 문제 해결</h6>
    <div class="ps-3">
      <div class="alert alert-warning">
        <strong>디버깅 워크플로우:</strong>
        <ol class="mb-0 mt-2">
          <li><strong>문제 발생:</strong> 에러 메시지와 상황 상세 기록</li>
          <li><strong>AI 분석 요청:</strong> 에러 로그와 관련 코드 공유</li>
          <li><strong>해결책 적용:</strong> 제안된 수정사항 테스트</li>
          <li><strong>검증 및 개선:</strong> 수정 후 추가 최적화 진행</li>
        </ol>
      </div>

      <div class="mt-3">
        <strong>자주 발생하는 문제와 AI 활용법:</strong>
        <ul>
          <li><strong>CSS 레이아웃 이슈:</strong> 스크린샷과 함께 레이아웃 문제 설명</li>
          <li><strong>JavaScript 로직 오류:</strong> 함수 단위로 코드 분석 요청</li>
          <li><strong>API 연동 문제:</strong> 네트워크 탭 결과와 함께 분석 요청</li>
          <li><strong>성능 최적화:</strong> 프로파일링 결과 공유 후 개선안 요청</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- 고급 기능 구현 섹션 -->
<div class="content-card mt-4">
  <h5><i class="fas fa-cogs me-2 text-info"></i>3단계: 고급 기능 및 최적화</h5>

  <div class="mt-3">
    <h6 class="fw-bold text-primary">API 연동 및 데이터 관리</h6>
    <div class="ps-3">
      <div class="bg-light p-3 rounded">
        <strong>API 연동 패턴:</strong>
        <pre class="mt-2 mb-0 small"><code>// API 서비스 설계 요청
프로젝트에 [기능명] API 연동이 필요합니다.

요구사항:
1. RESTful API 설계 원칙 적용
2. 에러 처리 및 재시도 로직
3. 로딩 상태 관리
4. 캐싱 전략 구현
5. TypeScript 타입 정의

구현해주세요:
- API 서비스 클래스
- React Hook (useEffect, useState 활용)
- 에러 바운더리 컴포넌트
- 로딩 스피너 및 스켈레톤 UI</code></pre>
      </div>

      <div class="mt-3">
        <strong>상태 관리 최적화:</strong>
        <ul>
          <li><strong>Context API:</strong> 전역 상태 관리 구조 설계</li>
          <li><strong>Local Storage:</strong> 데이터 영속성 구현</li>
          <li><strong>Caching:</strong> API 응답 캐싱 전략</li>
          <li><strong>State Synchronization:</strong> 다중 컴포넌트 간 상태 동기화</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">사용자 경험(UX) 개선</h6>
    <div class="ps-3">
      <div class="row">
        <div class="col-md-6">
          <div class="alert alert-light border">
            <strong>인터랙션 개선:</strong>
            <ul class="mb-0 mt-2">
              <li>애니메이션 및 트랜지션</li>
              <li>마이크로 인터랙션</li>
              <li>키보드 네비게이션</li>
              <li>접근성(A11y) 개선</li>
            </ul>
          </div>
        </div>
        <div class="col-md-6">
          <div class="alert alert-light border">
            <strong>성능 최적화:</strong>
            <ul class="mb-0 mt-2">
              <li>이미지 최적화</li>
              <li>코드 스플리팅</li>
              <li>Lazy Loading</li>
              <li>번들 사이즈 최적화</li>
            </ul>
          </div>
        </div>
      </div>

      <div class="mt-3">
        <strong>UX 개선 AI 프롬프트:</strong>
        <pre class="bg-light p-2 small"><code>현재 웹 애플리케이션의 사용자 경험을 개선하고 싶습니다.

개선 영역:
1. 페이지 로딩 속도 최적화
2. 사용자 인터랙션 반응성 향상
3. 접근성 기준 준수
4. 모바일 사용자 경험 개선

구체적 요청:
- Core Web Vitals 점수 개선 방안
- 애니메이션 라이브러리 추천 및 구현
- WCAG 2.1 가이드라인 준수 코드
- 반응형 디자인 개선점</code></pre>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">테스트 및 품질 관리</h6>
    <div class="ps-3">
      <div class="alert alert-success">
        <strong>테스트 전략:</strong>
        <ul class="mb-0 mt-2">
          <li><strong>단위 테스트:</strong> 핵심 함수 및 컴포넌트 테스트</li>
          <li><strong>통합 테스트:</strong> API 연동 및 데이터 플로우 테스트</li>
          <li><strong>E2E 테스트:</strong> 사용자 시나리오 기반 테스트</li>
          <li><strong>성능 테스트:</strong> 로딩 속도 및 반응성 측정</li>
        </ul>
      </div>

      <div class="mt-3">
        <strong>코드 품질 관리:</strong>
        <ul>
          <li>ESLint 규칙 설정 및 커스터마이징</li>
          <li>Prettier를 통한 코드 포맷팅 자동화</li>
          <li>Husky를 활용한 pre-commit 훅 설정</li>
          <li>코드 리뷰 체크리스트 작성</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- 배포 및 마무리 섹션 -->
<div class="content-card mt-4">
  <h5><i class="fas fa-rocket me-2 text-danger"></i>4단계: 배포 및 프로젝트 완성</h5>

  <div class="mt-3">
    <h6 class="fw-bold text-primary">배포 환경 설정</h6>
    <div class="ps-3">
      <div class="bg-light p-3 rounded">
        <strong>배포 플랫폼별 설정:</strong>
        <ul class="mt-2">
          <li><strong>Vercel:</strong> Next.js 최적화, 환경변수 설정, 도메인 연결</li>
          <li><strong>Netlify:</strong> SPA 라우팅 설정, 폼 처리, 함수 배포</li>
          <li><strong>GitHub Pages:</strong> 정적 사이트 배포, 커스텀 도메인</li>
          <li><strong>Firebase Hosting:</strong> Firebase 서비스 통합 배포</li>
        </ul>
      </div>

      <div class="mt-3">
        <strong>배포 자동화 설정 프롬프트:</strong>
        <pre class="bg-light p-2 small"><code>프로젝트: [프로젝트명]
배포 플랫폼: [선택한 플랫폼]
기술 스택: [사용 기술들]

다음을 설정해주세요:
1. CI/CD 파이프라인 구성
2. 환경변수 관리 방법
3. 빌드 최적화 설정
4. 도메인 연결 및 SSL 설정
5. 모니터링 및 분석 도구 연동

추가 요청:
- GitHub Actions 워크플로우
- 배포 전 자동 테스트 실행
- 롤백 전략 구성</code></pre>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">프로젝트 문서화 및 마무리</h6>
    <div class="ps-3">
      <div class="row">
        <div class="col-md-6">
          <div class="alert alert-info">
            <strong>필수 문서:</strong>
            <ul class="mb-0 mt-2">
              <li>README.md 작성</li>
              <li>API 문서화</li>
              <li>컴포넌트 스토리북</li>
              <li>배포 가이드</li>
            </ul>
          </div>
        </div>
        <div class="col-md-6">
          <div class="alert alert-warning">
            <strong>포트폴리오 준비:</strong>
            <ul class="mb-0 mt-2">
              <li>프로젝트 스크린샷</li>
              <li>기술 스택 정리</li>
              <li>구현 과정 기록</li>
              <li>학습 내용 정리</li>
            </ul>
          </div>
        </div>
      </div>

      <div class="mt-3">
        <strong>프로젝트 리뷰 및 개선점 도출:</strong>
        <ul>
          <li><strong>성능 분석:</strong> Lighthouse 스코어 측정 및 개선</li>
          <li><strong>사용자 피드백:</strong> 베타 테스터를 통한 실제 사용성 검증</li>
          <li><strong>코드 품질 검토:</strong> 리팩토링 포인트 및 최적화 기회 파악</li>
          <li><strong>확장 계획:</strong> 추가 기능 개발 로드맵 수립</li>
        </ul>
      </div>
    </div>
  </div>

  <div class="mt-4">
    <h6 class="fw-bold text-primary">바이브 코딩 베스트 프랙티스 정리</h6>
    <div class="ps-3">
      <div class="alert alert-success">
        <strong>성공적인 바이브 코딩을 위한 핵심 원칙:</strong>
        <ol class="mb-0 mt-2">
          <li><strong>명확한 커뮤니케이션:</strong> AI에게 정확하고 상세한 요구사항 전달</li>
          <li><strong>점진적 개발:</strong> 작은 단위로 나누어 단계별 구현 및 검증</li>
          <li><strong>지속적인 학습:</strong> AI 응답을 통해 새로운 기술과 패턴 학습</li>
          <li><strong>품질 관리:</strong> 코드 리뷰와 테스트를 통한 품질 보장</li>
          <li><strong>문서화 습관:</strong> 과정과 결과를 체계적으로 기록</li>
        </ol>
      </div>

      <div class="mt-3">
        <strong>다음 프로젝트를 위한 개선점:</strong>
        <ul>
          <li>더 효과적인 프롬프트 패턴 개발</li>
          <li>AI 도구별 특성을 활용한 업무 분담</li>
          <li>자동화 도구 도입으로 반복 작업 최소화</li>
          <li>팀 협업 시 AI 활용 워크플로우 구축</li>
        </ul>
      </div>
    </div>
  </div>
</div>

<!-- 실습 과제 섹션 -->
<div class="content-card mt-4">
  <h5><i class="fas fa-tasks me-2 text-secondary"></i>실습 과제</h5>

  <div class="mt-3">
    <div class="alert alert-primary">
      <h6><i class="fas fa-clipboard-list me-2"></i>개인 프로젝트 완성하기</h6>
      <p class="mb-2">이번 강의에서 학습한 바이브 코딩 방법론을 활용하여 완전한 웹 애플리케이션을 구축해보세요.</p>

      <strong>과제 요구사항:</strong>
      <ul class="mt-2 mb-0">
        <li>AI와 협업하여 프로젝트 기획부터 배포까지 전 과정 완주</li>
        <li>최소 3개 이상의 핵심 기능 구현</li>
        <li>반응형 디자인 및 접근성 고려</li>
        <li>실제 배포 환경에서 동작하는 서비스 완성</li>
        <li>프로젝트 문서화 및 포트폴리오 자료 준비</li>
      </ul>
    </div>

    <div class="row mt-3">
      <div class="col-md-6">
        <div class="alert alert-light border">
          <strong>제출물:</strong>
          <ul class="mb-0 mt-2">
            <li>완성된 웹 애플리케이션 URL</li>
            <li>GitHub 저장소 링크</li>
            <li>프로젝트 README 문서</li>
            <li>개발 과정 기록 (선택사항)</li>
          </ul>
        </div>
      </div>
      <div class="col-md-6">
        <div class="alert alert-light border">
          <strong>평가 기준:</strong>
          <ul class="mb-0 mt-2">
            <li>기능 완성도 및 사용성</li>
            <li>코드 품질 및 구조</li>
            <li>디자인 및 사용자 경험</li>
            <li>문서화 수준</li>
          </ul>
        </div>
      </div>
    </div>
  </div>
</div>