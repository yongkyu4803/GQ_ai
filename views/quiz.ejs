<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - GQ AI Learning Platform</title>
    
    <!-- Bootstrap CSS (기존 스타일 유지) -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- Tailwind CSS via CDN (production ready) -->
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    
    <!-- React & ReactDOM -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    
    <!-- Babel for JSX transformation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <style>
        /* Bootstrap과 Tailwind 충돌 방지 */
        .quiz-container * {
            box-sizing: border-box;
        }
        
        /* 기존 navbar 스타일 유지 */
        .navbar {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        
        .navbar-brand, .nav-link {
            color: white !important;
        }
        
        .nav-link:hover {
            color: #f8f9fa !important;
        }
        
        .dropdown-menu .dropdown-item.active {
            background-color: #667eea;
        }
        
        /* Quiz background images - Using !important to override Tailwind */
        .bg-quiz-beginner {
            background-image: url('/images/cho.jpg') !important;
            background-color: #3B82F6 !important;
            background-size: cover !important;
            background-position: center !important;
            background-repeat: no-repeat !important;
            min-height: 16rem !important;
        }
        
        .bg-quiz-intermediate {
            background-image: url('/images/jong.jpg') !important;
            background-color: #10B981 !important;
            background-size: cover !important;
            background-position: center !important;
            background-repeat: no-repeat !important;
            min-height: 16rem !important;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <%- include('navbar') %>
    
    <!-- Quiz Container -->
    <div id="quiz-root" class="quiz-container"></div>
    
    <!-- React Component Script -->
    <script type="text/babel">
        const { useState } = React;
        
        // FontAwesome 아이콘 컴포넌트들
        const CheckCircle = ({ className }) => React.createElement('i', { className: `fas fa-check-circle ${className}` });
        const XCircle = ({ className }) => React.createElement('i', { className: `fas fa-times-circle ${className}` });
        const RotateCcw = ({ className }) => React.createElement('i', { className: `fas fa-undo ${className}` });
        const Trophy = ({ className }) => React.createElement('i', { className: `fas fa-trophy ${className}` });
        const BookOpen = ({ className }) => React.createElement('i', { className: `fas fa-book-open ${className}` });

        const AIQuizApp = () => {
          const [currentLevel, setCurrentLevel] = useState('선택');
          const [currentQuestion, setCurrentQuestion] = useState(0);
          const [selectedAnswers, setSelectedAnswers] = useState({});
          const [showResult, setShowResult] = useState(false);
          const [quizCompleted, setQuizCompleted] = useState(false);
          const [showExplanation, setShowExplanation] = useState({});
          const [selectedQuestionForExplanation, setSelectedQuestionForExplanation] = useState(null);

          const quizData = {
            초급: {
              title: "초급 단계 - 기본 개념 이해",
              subtitle: "생성형 AI의 기본 개념과 도구 이해도를 평가합니다",
              questions: [
                {
                  id: 1,
                  question: "생성형 AI(Generative AI)에 대한 설명으로 가장 적절한 것은?",
                  options: [
                    "기존 데이터를 분석하여 패턴을 찾는 AI",
                    "새로운 콘텐츠(텍스트, 이미지, 코드 등)를 생성하는 AI",
                    "특정 작업을 자동화하는 AI",
                    "음성을 인식하는 AI"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② 새로운 콘텐츠(텍스트, 이미지, 코드 등)를 생성하는 AI",
                    description: "생성형 AI는 기존 데이터를 학습하여 새로운 콘텐츠를 창조하는 인공지능을 의미합니다. ChatGPT(텍스트), DALL-E(이미지), GitHub Copilot(코드) 등이 대표적인 예시입니다. 단순히 패턴을 분석하거나 작업을 자동화하는 것을 넘어서 창작물을 만들어내는 것이 핵심 특징입니다."
                  }
                },
                {
                  id: 2,
                  question: "멀티모달 AI(Multimodal AI)에 대한 설명으로 가장 적절한 것은?",
                  options: [
                    "여러 언어를 동시에 사용할 수 있는 AI",
                    "텍스트, 이미지, 음성 등 다양한 형태의 데이터를 처리할 수 있는 AI",
                    "여러 사용자가 동시에 사용할 수 있는 AI",
                    "여러 개의 모델을 조합한 AI"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② 텍스트, 이미지, 음성 등 다양한 형태의 데이터를 처리할 수 있는 AI",
                    description: "멀티모달 AI는 여러 종류의 데이터 형태(모달리티)를 동시에 이해하고 처리할 수 있는 AI입니다. 예를 들어, GPT-4V는 텍스트와 이미지를 함께 입력받아 분석할 수 있고, Claude도 텍스트와 이미지를 동시에 처리 가능합니다. 이는 사람이 시각, 청각, 촉각 등 여러 감각을 통해 세상을 이해하는 것과 유사한 개념입니다."
                  }
                },
                {
                  id: 3,
                  question: "프롬프트(Prompt)란 무엇인가요?",
                  options: [
                    "AI가 생성한 결과물",
                    "AI에게 주는 명령이나 질문",
                    "AI의 학습 데이터",
                    "AI의 응답 속도"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② AI에게 주는 명령이나 질문",
                    description: "프롬프트는 AI와 소통하기 위한 입력 텍스트로, AI에게 원하는 작업을 지시하거나 질문하는 내용입니다. 좋은 프롬프트는 구체적이고 명확해야 하며, 원하는 결과를 얻기 위한 핵심 요소입니다. '프롬프트 엔지니어링'이라는 분야가 생겨날 만큼 중요한 개념입니다."
                  }
                },
                {
                  id: 4,
                  question: "추론 모델(Reasoning Model)과 비추론 모델의 차이점으로 가장 적절한 것은?",
                  options: [
                    "추론 모델은 답변 속도가 더 빠르다",
                    "추론 모델은 복잡한 문제를 단계적으로 분석하여 해결한다",
                    "추론 모델은 더 많은 데이터로 학습되었다",
                    "추론 모델은 이미지 생성에 특화되어 있다"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② 추론 모델은 복잡한 문제를 단계적으로 분석하여 해결한다",
                    description: "추론 모델(예: GPT-o1, Claude 3.5 Sonnet)은 답변을 생성하기 전에 내부적으로 단계별 사고 과정을 거칩니다. 마치 사람이 어려운 수학 문제를 풀 때 중간 과정을 거치는 것처럼, AI도 복잡한 문제에 대해 '생각하는 시간'을 가져 더 정확하고 논리적인 답변을 제공합니다. 일반 모델보다 응답 시간은 길지만 품질이 향상됩니다."
                  }
                },
                {
                  id: 5,
                  question: "생성형 AI가 가장 어려워하는 작업은?",
                  options: [
                    "텍스트 요약",
                    "실시간 정보 검색",
                    "언어 번역",
                    "코드 작성"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② 실시간 정보 검색",
                    description: "대부분의 생성형 AI는 학습 데이터의 마감일(컷오프) 이후의 정보를 알지 못하며, 실시간으로 인터넷을 검색할 수 없습니다. 따라서 최신 뉴스, 실시간 주가, 오늘의 날씨 같은 정보는 제공하기 어렵습니다. 이를 해결하기 위해 RAG나 검색 기능이 통합된 AI 도구들이 개발되고 있습니다."
                  }
                },
                {
                  id: 6,
                  question: "효과적인 프롬프트 작성법으로 옳지 않은 것은?",
                  options: [
                    "구체적이고 명확하게 작성한다",
                    "원하는 결과의 형식을 지정한다",
                    "가능한 한 짧게 작성한다",
                    "예시를 함께 제공한다"
                  ],
                  correct: 2,
                  explanation: {
                    answer: "③ 가능한 한 짧게 작성한다",
                    description: "효과적인 프롬프트는 오히려 구체적이고 상세해야 합니다. 너무 짧고 모호한 프롬프트는 AI가 의도를 정확히 파악하기 어려워 원하는 결과를 얻기 힘듭니다. 맥락, 형식, 예시 등을 포함한 상세한 프롬프트가 더 나은 결과를 만들어냅니다."
                  }
                },
                {
                  id: 7,
                  question: "생성형 AI의 '환각(Hallucination)' 현상이란?",
                  options: [
                    "AI가 너무 빠르게 응답하는 것",
                    "AI가 사실이 아닌 정보를 그럴듯하게 생성하는 것",
                    "AI가 응답을 거부하는 것",
                    "AI가 같은 답변을 반복하는 것"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② AI가 사실이 아닌 정보를 그럴듯하게 생성하는 것",
                    description: "환각은 AI가 실제로는 존재하지 않는 정보를 마치 사실인 것처럼 자신 있게 제시하는 현상입니다. 예를 들어, 존재하지 않는 논문을 인용하거나 틀린 통계를 정확한 것처럼 제시하는 경우입니다. 이는 현재 AI 기술의 주요 한계 중 하나로, 사용자가 항상 팩트체킹을 해야 하는 이유입니다."
                  }
                },
                {
                  id: 8,
                  question: "RAG(Retrieval-Augmented Generation) 기술에 대한 설명으로 가장 적절한 것은?",
                  options: [
                    "AI가 특정 문서나 데이터베이스를 참조하여 더 정확한 정보를 제공하는 기술",
                    "AI의 응답 속도를 높이는 기술",
                    "AI가 이미지를 생성하는 기술",
                    "AI의 창의성을 향상시키는 기술"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① AI가 특정 문서나 데이터베이스를 참조하여 더 정확한 정보를 제공하는 기술",
                    description: "RAG는 AI가 답변을 생성하기 전에 관련 문서나 데이터베이스에서 정보를 검색(Retrieval)한 후, 그 정보를 바탕으로 답변을 생성(Generation)하는 기술입니다. 이를 통해 AI의 환각 현상을 줄이고, 더 정확하고 최신의 정보를 제공할 수 있습니다. 기업의 내부 문서나 특정 도메인 지식을 AI가 활용할 수 있게 해주는 핵심 기술입니다."
                  }
                },
                {
                  id: 9,
                  question: "AI 에이전트(AI Agent)의 특징으로 가장 적절한 것은?",
                  options: [
                    "단순 질답을 넘어 복잡한 작업을 자동으로 수행할 수 있음",
                    "사람보다 빠른 타이핑 속도를 가짐",
                    "24시간 온라인 상태를 유지함",
                    "여러 언어를 동시에 처리함"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① 단순 질답을 넘어 복잡한 작업을 자동으로 수행할 수 있음",
                    description: "AI 에이전트는 사용자의 목표를 이해하고 여러 단계의 작업을 자율적으로 수행할 수 있는 AI입니다. 예를 들어, '여행 계획을 세워줘'라고 하면 목적지 조사, 항공편 검색, 호텔 예약, 일정 작성 등을 순차적으로 처리할 수 있습니다. 단순한 챗봇과 달리 복잡한 업무 프로세스를 자동화할 수 있는 것이 특징입니다."
                  }
                },
                {
                  id: 10,
                  question: "바이브 코딩(Vibe Coding)에 대한 설명으로 가장 적절한 것은?",
                  options: [
                    "정확한 문법보다는 자연어로 대략적인 의도를 전달하여 AI가 코드를 생성하도록 하는 방식",
                    "음악을 들으며 코딩하는 방법",
                    "여러 명이 함께 코딩하는 방법",
                    "빠른 속도로 코딩하는 기법"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① 정확한 문법보다는 자연어로 대략적인 의도를 전달하여 AI가 코드를 생성하도록 하는 방식",
                    description: "바이브 코딩은 프로그래밍 지식이 부족해도 '이런 느낌으로 만들어줘'라는 식으로 자연어로 의도를 전달하면 AI가 코드를 생성해주는 방식입니다. 정확한 문법이나 구체적인 기술 명세 없이도 '분위기'나 '느낌'만 전달해도 작동하는 프로그램을 만들 수 있어, 비개발자도 AI의 도움으로 간단한 애플리케이션을 개발할 수 있게 해줍니다."
                  }
                }
              ]
            },
            중급: {
              title: "중급 단계 - 실무 활용",
              subtitle: "실무에서의 AI 활용 능력과 고급 기법을 평가합니다",
              questions: [
                {
                  id: 1,
                  question: "프롬프트 엔지니어링에서 '퓨샷 러닝(Few-shot Learning)'이란?",
                  options: [
                    "AI에게 한 번만 예시를 보여주는 것",
                    "AI에게 여러 개의 예시를 제공하여 패턴을 학습시키는 것",
                    "AI의 학습 데이터를 줄이는 것",
                    "AI의 응답 속도를 높이는 것"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② AI에게 여러 개의 예시를 제공하여 패턴을 학습시키는 것",
                    description: "퓨샷 러닝은 AI에게 2-5개 정도의 구체적인 예시를 보여주어 원하는 패턴이나 형식을 학습시키는 기법입니다. 예를 들어, 이메일 답변 형식을 가르칠 때 몇 개의 좋은 답변 예시를 제공하면 AI가 그 패턴을 이해하고 유사한 형식으로 답변합니다. 제로샷(예시 없음)보다 정확도가 높고, 파인튜닝보다 간단한 방법입니다."
                  }
                },
                {
                  id: 2,
                  question: "\"당신은 전문 마케터입니다. 20대 여성을 타겟으로 한 화장품 광고 카피를 3개 작성해 주세요.\" 이 프롬프트에서 사용된 기법은?",
                  options: [
                    "역할 부여(Role Playing)",
                    "단계별 사고(Step-by-step)",
                    "체인 오브 쏘트(Chain of Thought)",
                    "제로샷 러닝(Zero-shot Learning)"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① 역할 부여(Role Playing)",
                    description: "'당신은 전문 마케터입니다'라는 문구는 AI에게 특정 역할과 전문성을 부여하는 기법입니다. 이를 통해 AI는 해당 역할의 관점에서 생각하고 전문적인 답변을 제공하게 됩니다. 역할 부여는 AI의 답변 품질을 크게 향상시키는 효과적인 프롬프트 기법 중 하나입니다."
                  }
                },
                {
                  id: 3,
                  question: "RAG(Retrieval-Augmented Generation) 기술의 주요 목적은?",
                  options: [
                    "AI의 응답 속도를 높이기 위해",
                    "AI가 최신 정보나 특정 문서를 참조하여 답변하게 하기 위해",
                    "AI의 창의성을 높이기 위해",
                    "AI의 에너지 소비를 줄이기 위해"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② AI가 최신 정보나 특정 문서를 참조하여 답변하게 하기 위해",
                    description: "RAG의 핵심 목적은 AI의 지식 한계를 극복하는 것입니다. AI 모델의 학습 데이터는 특정 시점에서 고정되므로 최신 정보나 특정 기업의 내부 문서는 모릅니다. RAG를 통해 AI가 실시간으로 관련 정보를 검색하고 참조하여 더 정확하고 최신의 답변을 제공할 수 있습니다."
                  }
                },
                {
                  id: 4,
                  question: "업무에서 AI를 활용할 때 가장 우선적으로 고려해야 할 것은?",
                  options: [
                    "최신 AI 도구 사용",
                    "데이터 보안 및 개인정보 보호",
                    "비용 절감",
                    "처리 속도"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② 데이터 보안 및 개인정보 보호",
                    description: "기업 환경에서 AI 도구를 사용할 때 가장 중요한 것은 보안입니다. 많은 AI 서비스들이 입력 데이터를 학습에 활용할 수 있고, 클라우드 서버에 데이터가 전송되므로 민감한 정보가 유출될 위험이 있습니다. 따라서 데이터 분류, 익명화, 보안 정책 수립 등이 우선되어야 합니다."
                  }
                },
                {
                  id: 5,
                  question: "다음 중 AI 생성 콘텐츠를 검토할 때 확인해야 할 항목이 아닌 것은?",
                  options: [
                    "사실 정확성",
                    "편향성 여부",
                    "생성 시간",
                    "맥락 적절성"
                  ],
                  correct: 2,
                  explanation: {
                    answer: "③ 생성 시간",
                    description: "AI 생성 콘텐츠의 품질 검토에서 생성 시간은 중요한 요소가 아닙니다. 중요한 것은 사실 정확성(팩트체킹), 편향성 여부(공정성), 맥락 적절성(상황에 맞는지) 등입니다. 빠르게 생성된다고 해서 품질이 좋은 것은 아니며, 시간보다는 내용의 질이 중요합니다."
                  }
                },
                {
                  id: 6,
                  question: "프롬프트에서 \"단계별로 생각해보세요\"라는 지시의 효과는?",
                  options: [
                    "AI의 처리 속도를 높인다",
                    "AI가 더 논리적이고 체계적으로 사고하도록 유도한다",
                    "AI의 창의성을 제한한다",
                    "AI의 토큰 사용량을 줄인다"
                  ],
                  correct: 1,
                  explanation: {
                    answer: "② AI가 더 논리적이고 체계적으로 사고하도록 유도한다",
                    description: "'단계별로 생각해보세요' 같은 지시는 Chain-of-Thought(사고의 연쇄) 기법으로, AI가 복잡한 문제를 단계별로 분해하여 해결하도록 유도합니다. 이를 통해 AI는 중간 과정을 보여주며 더 논리적이고 정확한 답변을 제공합니다. 특히 수학 문제나 복잡한 추론이 필요한 작업에서 효과적입니다."
                  }
                },
                {
                  id: 7,
                  question: "업무 효율성을 높이기 위한 프롬프트 최적화 방법으로 가장 적절한 것은?",
                  options: [
                    "반복 사용할 프롬프트는 템플릿화하고 변수 부분만 교체하여 활용",
                    "매번 새로운 방식으로 질문하기",
                    "가능한 복잡하고 긴 프롬프트 작성",
                    "AI가 알아서 하도록 간단하게만 요청"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① 반복 사용할 프롬프트는 템플릿화하고 변수 부분만 교체하여 활용",
                    description: "실무에서는 유사한 작업을 반복하는 경우가 많으므로, 효과가 검증된 프롬프트를 템플릿으로 만들어 재사용하는 것이 효율적입니다. 예를 들어, '다음 내용을 [대상]을 위한 [형식]으로 작성해주세요'와 같은 템플릿을 만들고, 대상과 형식만 바꿔가며 사용하면 일관된 품질을 유지하면서 시간을 절약할 수 있습니다."
                  }
                },
                {
                  id: 8,
                  question: "기업에서 AI 도입 시 우선순위 결정 기준으로 가장 적절한 것은?",
                  options: [
                    "ROI가 명확하고 위험도가 낮은 업무부터 단계적 도입",
                    "가장 복잡한 업무부터 자동화",
                    "모든 부서에 동시 도입",
                    "경쟁사 따라하기"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① ROI가 명확하고 위험도가 낮은 업무부터 단계적 도입",
                    description: "기업의 AI 도입은 신중한 전략이 필요합니다. 투자 대비 효과(ROI)가 명확하고 실패 시 영향이 적은 업무부터 시작하여 성공 사례를 축적한 후 점진적으로 확대하는 것이 바람직합니다. 예를 들어, 고객 문의 응답 자동화 같은 업무부터 시작하여 점차 핵심 업무로 확장하는 방식입니다."
                  }
                },
                {
                  id: 9,
                  question: "AI 생성 콘텐츠의 품질을 체계적으로 관리하는 방법은?",
                  options: [
                    "평가 기준을 사전에 정의하고 일관된 검토 프로세스 적용",
                    "AI를 믿고 그대로 사용",
                    "문법만 확인하면 충분",
                    "다른 AI로 재검증만 하기"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① 평가 기준을 사전에 정의하고 일관된 검토 프로세스 적용",
                    description: "AI 생성 콘텐츠의 품질 관리를 위해서는 명확한 기준과 체계적인 프로세스가 필요합니다. 정확성, 관련성, 톤앤매너, 브랜드 일치성 등의 평가 기준을 사전에 정의하고, 체크리스트를 만들어 일관된 검토를 수행해야 합니다. 이를 통해 품질의 편차를 줄이고 지속적인 개선이 가능합니다."
                  }
                },
                {
                  id: 10,
                  question: "업무 프로세스에 AI를 통합할 때 가장 중요한 고려사항은?",
                  options: [
                    "기존 워크플로우 분석 후 AI 적용 지점을 명확히 정의",
                    "AI가 모든 업무를 대체하도록 설계",
                    "사람의 개입 없이 완전 자동화",
                    "가장 복잡한 업무부터 AI 적용"
                  ],
                  correct: 0,
                  explanation: {
                    answer: "① 기존 워크플로우 분석 후 AI 적용 지점을 명확히 정의",
                    description: "AI를 업무에 성공적으로 통합하려면 현재의 업무 프로세스를 정확히 이해하고, AI가 가장 효과적으로 기여할 수 있는 지점을 찾아야 합니다. 무작정 AI를 도입하기보다는 워크플로우 매핑을 통해 병목 지점, 반복 작업, 의사결정 포인트 등을 파악하고 AI 적용 계획을 수립하는 것이 중요합니다. 이를 통해 AI와 인간의 역할을 명확히 구분하고 최적의 협업 체계를 구축할 수 있습니다."
                  }
                }
              ]
            }
          };

          const getScoreLevel = (score, total) => {
            const percentage = (score / total) * 100;
            if (percentage >= 90) return { level: "우수", color: "text-green-600", message: "매우 훌륭합니다!" };
            if (percentage >= 70) return { level: "양호", color: "text-blue-600", message: "잘 하고 있습니다!" };
            if (percentage >= 50) return { level: "보통", color: "text-yellow-600", message: "더 학습이 필요합니다." };
            return { level: "부족", color: "text-red-600", message: "추가 학습을 권장합니다." };
          };

          const handleLevelSelect = (level) => {
            setCurrentLevel(level);
            setCurrentQuestion(0);
            setSelectedAnswers({});
            setShowResult(false);
            setQuizCompleted(false);
          };

          const handleAnswerSelect = (questionId, answerIndex) => {
            setSelectedAnswers(prev => ({
              ...prev,
              [questionId]: answerIndex
            }));
          };

          const handleNext = () => {
            if (currentQuestion < quizData[currentLevel].questions.length - 1) {
              setCurrentQuestion(prev => prev + 1);
            } else {
              setQuizCompleted(true);
              calculateResult();
            }
          };

          const handlePrevious = () => {
            if (currentQuestion > 0) {
              setCurrentQuestion(prev => prev - 1);
            }
          };

          const calculateResult = () => {
            const questions = quizData[currentLevel].questions;
            let correctCount = 0;
            
            questions.forEach(question => {
              if (selectedAnswers[question.id] === question.correct) {
                correctCount++;
              }
            });
            
            setShowResult({ score: correctCount, total: questions.length });
          };

          const resetQuiz = () => {
            setCurrentLevel('선택');
            setCurrentQuestion(0);
            setSelectedAnswers({});
            setShowResult(false);
            setQuizCompleted(false);
            setShowExplanation({});
            setSelectedQuestionForExplanation(null);
          };

          const toggleExplanation = (questionId) => {
            setShowExplanation(prev => ({
              ...prev,
              [questionId]: !prev[questionId]
            }));
          };

          if (currentLevel === '선택') {
            return React.createElement('div', { className: "min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 p-6" },
              React.createElement('div', { className: "max-w-5xl mx-auto" },
                React.createElement('div', { className: "text-center mb-16" },
                  React.createElement('div', { className: "inline-flex items-center justify-center w-20 h-20 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-full mb-6 shadow-xl" },
                    React.createElement('i', { className: "fas fa-brain text-white text-3xl" })
                  ),
                  React.createElement('h1', { className: "text-5xl font-bold bg-gradient-to-r from-gray-800 to-gray-600 bg-clip-text text-transparent mb-6" }, "생성형 AI 이해도 진단"),
                  React.createElement('p', { className: "text-2xl text-gray-600 font-medium" }, "당신의 생성형 AI 활용수준은?"),
                  React.createElement('div', { className: "mt-6 inline-flex items-center gap-2 px-4 py-2 bg-white rounded-full shadow-lg" },
                    React.createElement('i', { className: "fas fa-clock text-blue-600" }),
                    React.createElement('span', { className: "text-gray-700 font-medium" }, "예상 소요시간: 10-15분")
                  )
                ),
                React.createElement('div', { className: "grid md:grid-cols-2 gap-10" },
                  React.createElement('div', { 
                    onClick: () => handleLevelSelect('초급'),
                    className: "group relative bg-white rounded-2xl shadow-xl hover:shadow-2xl cursor-pointer border-2 border-transparent hover:border-blue-300 transition-all duration-300 transform hover:scale-105 overflow-hidden"
                  },
                    React.createElement('div', { 
                      className: "relative h-64 overflow-hidden"
                    },
                      React.createElement('img', { 
                        src: "/images/cho.jpg",
                        alt: "초급 배경",
                        className: "absolute inset-0 w-full h-full object-cover z-10",
                        onError: (e) => {
                          console.log('초급 이미지 로드 실패:', e.target.src);
                          e.target.style.backgroundColor = '#FF0000';
                        },
                        onLoad: () => console.log('초급 이미지 로드 성공')
                      }),
                      // React.createElement('div', { className: "absolute inset-0 bg-gradient-to-t from-black/40 via-black/20 to-transparent" }),
                      React.createElement('div', { className: "absolute top-4 right-4 z-20" },
                        React.createElement('div', { className: "text-right text-white" },
                          React.createElement('div', { className: "inline-flex items-center justify-center w-12 h-12 bg-white/20 rounded-full mb-3 backdrop-blur-sm ml-auto" },
                            React.createElement(BookOpen, { className: "w-6 h-6 text-white" })
                          ),
                          React.createElement('h2', { className: "text-6xl font-bold mb-1 drop-shadow-lg" }, "초급 단계"),
                          React.createElement('p', { className: "text-2xl font-medium drop-shadow-md" }, "기본 개념과 도구 이해도")
                        )
                      ),
                      React.createElement('div', { className: "absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300" },
                        React.createElement('i', { className: "fas fa-arrow-right text-white text-2xl drop-shadow-lg" })
                      )
                    ),
                    React.createElement('div', { className: "p-6" },
                      React.createElement('div', { className: "bg-blue-50 rounded-xl p-6 mb-6 border border-blue-100" },
                        React.createElement('h3', { className: "text-lg font-bold text-blue-800 mb-4" }, "평가 내용"),
                        React.createElement('ul', { className: "text-gray-700 space-y-3" },
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-check-circle text-blue-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "생성형 AI 기본 개념")
                          ),
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-check-circle text-blue-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "주요 AI 도구 구분")
                          ),
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-check-circle text-blue-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "기본 프롬프트 작성")
                          ),
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-check-circle text-blue-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "AI 한계점 인식")
                          )
                        )
                      ),
                      React.createElement('div', { className: "flex items-center justify-center gap-4" },
                        React.createElement('span', { className: "bg-gradient-to-r from-blue-600 to-indigo-600 text-white text-lg font-bold px-6 py-3 rounded-full shadow-lg" }, "10문항"),
                        React.createElement('span', { className: "text-gray-600 font-medium" }, "약 5-8분")
                      )
                    )
                  ),
                  React.createElement('div', { 
                    onClick: () => handleLevelSelect('중급'),
                    className: "group relative bg-white rounded-2xl shadow-xl hover:shadow-2xl cursor-pointer border-2 border-transparent hover:border-green-300 transition-all duration-300 transform hover:scale-105 overflow-hidden"
                  },
                    React.createElement('div', { 
                      className: "relative h-64 overflow-hidden"
                    },
                      React.createElement('img', { 
                        src: "/images/jong.jpg",
                        alt: "중급 배경",
                        className: "absolute inset-0 w-full h-full object-cover z-10",
                        onError: (e) => {
                          console.log('중급 이미지 로드 실패:', e.target.src);
                          e.target.style.backgroundColor = '#00FF00';
                        },
                        onLoad: () => console.log('중급 이미지 로드 성공')
                      }),
                      // React.createElement('div', { className: "absolute inset-0 bg-gradient-to-t from-black/40 via-black/20 to-transparent" }),
                      React.createElement('div', { className: "absolute top-4 right-4 z-20" },
                        React.createElement('div', { className: "text-right text-white" },
                          React.createElement('div', { className: "inline-flex items-center justify-center w-12 h-12 bg-white/20 rounded-full mb-3 backdrop-blur-sm ml-auto" },
                            React.createElement(Trophy, { className: "w-6 h-6 text-white" })
                          ),
                          React.createElement('h2', { className: "text-6xl font-bold mb-1 drop-shadow-lg" }, "중급 단계"),
                          React.createElement('p', { className: "text-2xl font-medium drop-shadow-md" }, "실무 활용과 고급 기법")
                        )
                      ),
                      React.createElement('div', { className: "absolute bottom-4 right-4 opacity-0 group-hover:opacity-100 transition-opacity duration-300" },
                        React.createElement('i', { className: "fas fa-arrow-right text-white text-2xl drop-shadow-lg" })
                      )
                    ),
                    React.createElement('div', { className: "p-6" },
                      React.createElement('div', { className: "bg-green-50 rounded-xl p-6 mb-6 border border-green-100" },
                        React.createElement('h3', { className: "text-lg font-bold text-green-800 mb-4" }, "평가 내용"),
                        React.createElement('ul', { className: "text-gray-700 space-y-3" },
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-star text-green-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "프롬프트 엔지니어링")
                          ),
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-star text-green-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "업무 적용 전략")
                          ),
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-star text-green-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "AI 윤리와 보안")
                          ),
                          React.createElement('li', { className: "flex items-start gap-3" },
                            React.createElement('i', { className: "fas fa-star text-green-500 mt-1" }),
                            React.createElement('span', { className: "font-medium" }, "성능 평가와 최적화")
                          )
                        )
                      ),
                      React.createElement('div', { className: "flex items-center justify-center gap-4" },
                        React.createElement('span', { className: "bg-gradient-to-r from-green-600 to-emerald-600 text-white text-lg font-bold px-6 py-3 rounded-full shadow-lg" }, "10문항"),
                        React.createElement('span', { className: "text-gray-600 font-medium" }, "약 8-12분")
                      )
                    )
                  )
                )
              )
            );
          }

          if (showResult) {
            const scoreInfo = getScoreLevel(showResult.score, showResult.total);
            const percentage = Math.round((showResult.score / showResult.total) * 100);
            return React.createElement('div', { className: "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6" },
              React.createElement('div', { className: "max-w-3xl mx-auto" },
                React.createElement('div', { className: "bg-white rounded-2xl shadow-2xl overflow-hidden" },
                  React.createElement('div', { className: `bg-gradient-to-r ${scoreInfo.level === '우수' ? 'from-green-500 to-emerald-600' : scoreInfo.level === '양호' ? 'from-blue-500 to-indigo-600' : scoreInfo.level === '보통' ? 'from-yellow-500 to-orange-600' : 'from-red-500 to-pink-600'} p-8 text-center text-white relative overflow-hidden` },
                    React.createElement('div', { className: "absolute inset-0 bg-black opacity-10" }),
                    React.createElement('div', { className: "relative z-10" },
                      React.createElement('div', { className: "flex justify-center mb-6" },
                        React.createElement('div', { className: "w-24 h-24 bg-white bg-opacity-20 rounded-full flex items-center justify-center backdrop-blur-sm" },
                          React.createElement(Trophy, { className: "w-14 h-14 text-white drop-shadow-lg" })
                        )
                      ),
                      React.createElement('h2', { className: "text-4xl font-bold mb-4 drop-shadow-lg" }, "퀴즈 완료!"),
                      React.createElement('div', { className: "flex items-center justify-center gap-4 mb-4" },
                        React.createElement('div', { className: "text-7xl font-black drop-shadow-lg" }, `${showResult.score}`),
                        React.createElement('div', { className: "text-3xl font-medium opacity-80" }, "/"),
                        React.createElement('div', { className: "text-4xl font-bold opacity-90" }, `${showResult.total}`)
                      ),
                      React.createElement('div', { className: "text-2xl font-semibold mb-2" }, `${percentage}%`),
                      React.createElement('div', { className: "text-3xl font-bold mb-2" }, scoreInfo.level),
                      React.createElement('p', { className: "text-xl opacity-90" }, scoreInfo.message)
                    )
                  ),
                  React.createElement('div', { className: "p-8" },
                  React.createElement('div', { className: "bg-gradient-to-br from-gray-50 to-blue-50 rounded-xl p-6 mb-8 border border-gray-200 shadow-sm" },
                    React.createElement('h3', { className: "text-xl font-bold text-gray-800 mb-6 flex items-center gap-2" }, 
                      React.createElement('i', { className: "fas fa-chart-line text-blue-600" }),
                      "상세 결과"
                    ),
                    React.createElement('div', { className: "space-y-4" },
                      quizData[currentLevel].questions.map((question, index) => {
                        const isCorrect = selectedAnswers[question.id] === question.correct;
                        const userAnswer = selectedAnswers[question.id];
                        const showExp = showExplanation[question.id];
                        return React.createElement('div', { 
                          key: question.id, 
                          className: `relative overflow-hidden rounded-xl border-2 transition-all duration-300 hover:shadow-lg group ${
                            isCorrect 
                              ? 'bg-gradient-to-r from-green-50 to-emerald-50 border-green-200 hover:border-green-300' 
                              : 'bg-gradient-to-r from-red-50 to-pink-50 border-red-200 hover:border-red-300'
                          }`
                        },
                          React.createElement('div', { className: "absolute inset-0 bg-white opacity-70" }),
                          React.createElement('div', { className: "relative p-5" },
                            React.createElement('div', { className: "flex items-start justify-between mb-4" },
                              React.createElement('div', { className: "flex-1 pr-4" },
                                React.createElement('div', { className: "flex items-center gap-3 mb-3" },
                                  React.createElement('div', { 
                                    className: `w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold text-white ${
                                      isCorrect ? 'bg-green-500' : 'bg-red-500'
                                    }`
                                  }, index + 1),
                                  React.createElement('div', { className: "font-semibold text-gray-800 text-lg" }, `문항 ${index + 1}`)
                                ),
                                React.createElement('div', { className: "text-gray-700 mb-4 leading-relaxed" }, question.question),
                                React.createElement('div', { className: "flex items-center gap-3" },
                                  React.createElement('button', {
                                    onClick: () => toggleExplanation(question.id),
                                    className: `flex items-center gap-2 px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${
                                      isCorrect 
                                        ? 'bg-green-100 text-green-700 hover:bg-green-200 hover:scale-105' 
                                        : 'bg-blue-100 text-blue-700 hover:bg-blue-200 hover:scale-105'
                                    } shadow-sm hover:shadow-md`
                                  }, 
                                    React.createElement('i', { className: `fas ${showExp ? 'fa-eye-slash' : 'fa-eye'}` }),
                                    showExp ? "해설 닫기" : "해설 보기"
                                  ),
                                  React.createElement('div', { className: `px-3 py-1 rounded-full text-xs font-semibold ${
                                    isCorrect ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
                                  }`}, isCorrect ? "정답" : "오답")
                                )
                              ),
                              React.createElement('div', { className: "flex-shrink-0" },
                                React.createElement('div', { 
                                  className: `w-12 h-12 rounded-full flex items-center justify-center shadow-lg ${
                                    isCorrect ? 'bg-green-500' : 'bg-red-500'
                                  }`
                                },
                                  isCorrect ? 
                                    React.createElement(CheckCircle, { className: "w-7 h-7 text-white" }) :
                                    React.createElement(XCircle, { className: "w-7 h-7 text-white" })
                                )
                              )
                            ),
                            showExp && React.createElement('div', { 
                              className: `mt-4 p-4 rounded-xl border-l-4 transition-all duration-300 ${
                                isCorrect 
                                  ? 'bg-green-50 border-green-400' 
                                  : 'bg-blue-50 border-blue-400'
                              }`
                            },
                              React.createElement('div', { className: "space-y-3" },
                                React.createElement('div', { className: "flex items-start gap-2" },
                                  React.createElement('i', { className: "fas fa-check-circle text-green-600 mt-1" }),
                                  React.createElement('div', null,
                                    React.createElement('span', { className: "font-bold text-green-800" }, "정답: "),
                                    React.createElement('span', { className: "text-green-700 font-medium" }, question.explanation?.answer || "정답 정보 없음")
                                  )
                                ),
                                React.createElement('div', { className: "flex items-start gap-2" },
                                  React.createElement('i', { className: `fas ${isCorrect ? 'fa-user-check' : 'fa-user-times'} ${isCorrect ? 'text-green-600' : 'text-red-600'} mt-1` }),
                                  React.createElement('div', null,
                                    React.createElement('span', { className: "font-bold text-gray-800" }, "당신의 답: "),
                                    React.createElement('span', { 
                                      className: `font-medium ${isCorrect ? "text-green-600" : "text-red-600"}` 
                                    }, userAnswer !== undefined ? question.options[userAnswer] : "답변 안함")
                                  )
                                ),
                                React.createElement('div', { className: "border-t pt-3 mt-3" },
                                  React.createElement('div', { className: "flex items-start gap-2" },
                                    React.createElement('i', { className: "fas fa-lightbulb text-yellow-600 mt-1" }),
                                    React.createElement('div', null,
                                      React.createElement('span', { className: "font-bold text-gray-800" }, "해설: "),
                                      React.createElement('div', { className: "text-gray-700 mt-1 leading-relaxed" }, question.explanation?.description || "해설 정보 없음")
                                    )
                                  )
                                )
                              )
                            )
                          )
                        );
                      })
                    )
                    ),
                    React.createElement('div', { className: "grid md:grid-cols-2 gap-4 mt-8" },
                      React.createElement('button', {
                        onClick: () => handleLevelSelect(currentLevel === '초급' ? '중급' : '초급'),
                        className: "bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center justify-center gap-2"
                      }, 
                        React.createElement('i', { className: currentLevel === '초급' ? "fas fa-arrow-up" : "fas fa-redo" }),
                        currentLevel === '초급' ? '중급 단계 도전하기' : '초급 단계 다시하기'
                      ),
                      React.createElement('button', {
                        onClick: resetQuiz,
                        className: "bg-gradient-to-r from-gray-600 to-gray-700 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-gray-700 hover:to-gray-800 transition-all duration-200 transform hover:scale-105 shadow-lg hover:shadow-xl flex items-center justify-center gap-2"
                      }, 
                        React.createElement(RotateCcw, { className: "w-6 h-6" }),
                        "처음으로 돌아가기"
                      )
                    )
                  )
                )
              )
            );
          }

          const currentQuestionData = quizData[currentLevel].questions[currentQuestion];
          const isAnswered = selectedAnswers[currentQuestionData.id] !== undefined;

          return React.createElement('div', { className: "min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6" },
            React.createElement('div', { className: "max-w-3xl mx-auto" },
              React.createElement('div', { className: "bg-white rounded-xl shadow-lg p-8" },
                React.createElement('div', { className: "mb-6" },
                  React.createElement('div', { className: "flex justify-between items-center mb-4" },
                    React.createElement('h1', { className: "text-2xl font-bold text-gray-800" }, quizData[currentLevel].title),
                    React.createElement('button', { onClick: resetQuiz, className: "text-gray-500 hover:text-gray-700" },
                      React.createElement(RotateCcw, { className: "w-6 h-6" })
                    )
                  ),
                  React.createElement('p', { className: "text-gray-600" }, quizData[currentLevel].subtitle),
                  React.createElement('div', { className: "mt-4" },
                    React.createElement('div', { className: "flex justify-between text-sm text-gray-500 mb-2" },
                      React.createElement('span', null, "진행률"),
                      React.createElement('span', null, `${currentQuestion + 1} / ${quizData[currentLevel].questions.length}`)
                    ),
                    React.createElement('div', { className: "w-full bg-gray-200 rounded-full h-2" },
                      React.createElement('div', { 
                        className: "bg-blue-600 h-2 rounded-full transition-all duration-300",
                        style: { width: `${((currentQuestion + 1) / quizData[currentLevel].questions.length) * 100}%` }
                      })
                    )
                  )
                ),
                React.createElement('div', { className: "mb-8" },
                  React.createElement('h2', { className: "text-xl font-semibold text-gray-800 mb-6" },
                    `${currentQuestion + 1}. ${currentQuestionData.question}`
                  ),
                  React.createElement('div', { className: "space-y-3" },
                    currentQuestionData.options.map((option, index) =>
                      React.createElement('button', {
                        key: index,
                        onClick: () => handleAnswerSelect(currentQuestionData.id, index),
                        className: `w-full p-4 text-left rounded-lg border-2 transition-colors ${
                          selectedAnswers[currentQuestionData.id] === index
                            ? 'border-blue-500 bg-blue-50'
                            : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                        }`
                      },
                        React.createElement('span', { className: "font-medium text-gray-700 mr-3" },
                          `${String.fromCharCode(65 + index)}.`
                        ),
                        option
                      )
                    )
                  )
                ),
                React.createElement('div', { className: "flex justify-between" },
                  React.createElement('button', {
                    onClick: handlePrevious,
                    disabled: currentQuestion === 0,
                    className: `px-6 py-2 rounded-lg font-medium ${
                      currentQuestion === 0
                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        : 'bg-gray-600 text-white hover:bg-gray-700'
                    }`
                  }, "이전"),
                  React.createElement('button', {
                    onClick: handleNext,
                    disabled: !isAnswered,
                    className: `px-6 py-2 rounded-lg font-medium ${
                      !isAnswered
                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`
                  }, currentQuestion === quizData[currentLevel].questions.length - 1 ? '결과 보기' : '다음')
                )
              )
            )
          );
        };

        ReactDOM.render(React.createElement(AIQuizApp), document.getElementById('quiz-root'));
    </script>
    
    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>